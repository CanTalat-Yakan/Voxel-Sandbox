<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
// Get the directory of the .tt file
string templateDirectory = Path.GetDirectoryName(this.Host.TemplateFile);

// Go up one directory to get the project directory
string ASSETS = templateDirectory;

string SCENES = Path.Combine(ASSETS, "Scenes");
string SHADERS = Path.Combine(ASSETS, "Shaders");
string COMPUTE = Path.Combine(ASSETS, "ComputeShaders");
string TEXTURES = Path.Combine(ASSETS, "Textures");
string MODELS = Path.Combine(ASSETS, "Models");

// Escape strings for use in C# code
string escaped_DIRECTORY = EscapeStringLiteral(ASSETS + @"\");
string escaped_SCENES = EscapeStringLiteral(SCENES + @"\");
string escaped_SHADERS = EscapeStringLiteral(SHADERS + @"\");
string escaped_COMPUTE = EscapeStringLiteral(COMPUTE + @"\");
string escaped_TEXTURES = EscapeStringLiteral(TEXTURES + @"\");
string escaped_MODELS = EscapeStringLiteral(MODELS + @"\");

// Helper methods for template processing
void GenerateEnumMembers(string directoryPath, string searchPattern, bool searchAllDirectories = true)
{
    if (!Directory.Exists(directoryPath))
        return;

    var patterns = searchPattern.Split(';');
    var files = patterns.SelectMany(pattern => Directory.GetFiles(directoryPath, pattern, searchAllDirectories ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly))
                        .Select(Path.GetFileNameWithoutExtension)
                        .Distinct();

    foreach (var file in files)
    {
        string enumMember = SanitizeEnumMember(file);
#>
    <#= enumMember #>,
<#
    }
}

string SanitizeEnumMember(string name)
{
    var sb = new StringBuilder();
    foreach (char c in name)
    {
        if (char.IsLetterOrDigit(c) || c == '_')
            sb.Append(c);
        else
            sb.Append('_'); // Replace invalid characters with underscore
    }
    // Ensure the name doesn't start with a digit
    if (sb.Length > 0 && char.IsDigit(sb[0]))
        sb.Insert(0, '_');

    return sb.ToString();
}

string EscapeStringLiteral(string str) =>
    str.Replace("\\", "\\\\").Replace("\"", "\\\"");
#>
namespace Project;

// Enum for Scene files
public enum SceneFiles
{
<#
    GenerateEnumMembers(SCENES, "*.*");
#>
}

// Enum for Shader files
public enum ShaderFiles
{
<#
    GenerateEnumMembers(SHADERS, "*.hlsl");
#>
}

// Enum for Compute Shader files
public enum ComputeShaderFiles
{
<#
    GenerateEnumMembers(COMPUTE, "*.hlsl");
#>
}

// Enum for Texture files
public enum TextureFiles
{
<#
    GenerateEnumMembers(TEXTURES, "*.png;*.jpg;*.jpeg;*.bmp;*.tga");
#>
}

// Enum for Model files
public enum ModelFiles
{
<#
    GenerateEnumMembers(MODELS, "*.fbx;*.obj;*.dae");
#>
}