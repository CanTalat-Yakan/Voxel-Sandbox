<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
// Get the directory of the .tt file
string templateDirectory = Path.GetDirectoryName(this.Host.TemplateFile);

// Go up one directory to get the asset directory
string ASSETS = Path.GetFullPath(Path.Combine(templateDirectory, ".."));

// Define asset directories
string ANIMATIONS = Path.Combine(ASSETS, "Animation");
string AUDIOS = Path.Combine(ASSETS, "Audios");
string COMPUTESHADERS = Path.Combine(ASSETS, "ComputeShaders");
string DOCUMENTS = Path.Combine(ASSETS, "Documents");
string FONTS = Path.Combine(ASSETS, "Fonts");
string MATERIALS = Path.Combine(ASSETS, "Materials");
string MODELS = Path.Combine(ASSETS, "Models");
string PACKAGES = Path.Combine(ASSETS, "Packages");
string PREFABS = Path.Combine(ASSETS, "Prefabs");
string SCENES = Path.Combine(ASSETS, "Scenes");
string SCRIPTS = Path.Combine(ASSETS, "Scripts");
string SHADERS = Path.Combine(ASSETS, "Shaders");
string TEXTURES = Path.Combine(ASSETS, "Textures");
string VIDEOS = Path.Combine(ASSETS, "Videos");

// Escape strings for use in C# code
string escaped_ASSETS = EscapeStringLiteral(ASSETS + @"\");
string escaped_ANIMATIONS = EscapeStringLiteral(ANIMATIONS + @"\");
string escaped_AUDIOS = EscapeStringLiteral(AUDIOS + @"\");
string escaped_COMPUTESHADERS = EscapeStringLiteral(COMPUTESHADERS + @"\");
string escaped_DOCUMENTS = EscapeStringLiteral(DOCUMENTS + @"\");
string escaped_FONTS = EscapeStringLiteral(FONTS + @"\");
string escaped_MATERIALS = EscapeStringLiteral(MATERIALS + @"\");
string escaped_MODELS = EscapeStringLiteral(MODELS + @"\");
string escaped_PACKAGES = EscapeStringLiteral(PACKAGES + @"\");
string escaped_PREFABS = EscapeStringLiteral(PREFABS + @"\");
string escaped_SCENES = EscapeStringLiteral(SCENES + @"\");
string escaped_SCRIPTS = EscapeStringLiteral(SCRIPTS + @"\");
string escaped_SHADERS = EscapeStringLiteral(SHADERS + @"\");
string escaped_TEXTURES = EscapeStringLiteral(TEXTURES + @"\");
string escaped_VIDEOS = EscapeStringLiteral(VIDEOS + @"\");

// Helper methods for template processing
void GenerateEnumWithAttributes(string enumName, string directoryPath, string searchPattern, bool searchAllDirectories = true)
{
    if (!Directory.Exists(directoryPath))
        return;

    var patterns = searchPattern.Split(';');
    var files = patterns.SelectMany(pattern => Directory.GetFiles(directoryPath, pattern, searchAllDirectories ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly))
                        .Select(filePath => new { 
                            RelativePath = GetRelativePath(ASSETS, filePath).Replace("\\", "/"), 
                            EnumMemberName = SanitizeEnumMember(Path.GetFileNameWithoutExtension(filePath))
                        })
                        .GroupBy(f => f.EnumMemberName)
                        .Select(g => g.First()); // Handle duplicates

#>
public enum <#= enumName #>
{
<#
    foreach (var file in files)
    {
#>
    [AssetPath(@"<#= EscapeStringLiteral(file.RelativePath) #>")]
    <#= file.EnumMemberName #>,
<#
    }
#>
}

<#
}

string GetRelativePath(string basePath, string fullPath)
{
    if (string.IsNullOrEmpty(basePath))
        throw new ArgumentNullException("basePath");

    if (string.IsNullOrEmpty(fullPath))
        throw new ArgumentNullException("fullPath");

    Uri baseUri = new Uri(basePath.EndsWith(Path.DirectorySeparatorChar.ToString()) ? basePath : basePath + Path.DirectorySeparatorChar);
    Uri fullUri = new Uri(fullPath);

    if (baseUri.Scheme != fullUri.Scheme)
        return fullPath; // Path can't be made relative.

    Uri relativeUri = baseUri.MakeRelativeUri(fullUri);
    string relativePath = Uri.UnescapeDataString(relativeUri.ToString());

    // Replace forward slashes with backslashes if necessary
    if (Path.DirectorySeparatorChar == '\\')
        relativePath = relativePath.Replace('/', Path.DirectorySeparatorChar);
    else
        relativePath = relativePath.Replace('\\', Path.DirectorySeparatorChar);

    return relativePath;
}

string SanitizeEnumMember(string name)
{
    var sb = new StringBuilder();
    foreach (char c in name)
    {
        if (char.IsLetterOrDigit(c) || c == '_')
            sb.Append(c);
        else
            sb.Append('_'); // Replace invalid characters with underscore
    }
    // Ensure the name doesn't start with a digit
    if (sb.Length > 0 && char.IsDigit(sb[0]))
        sb.Insert(0, '_');

    // Avoid reserved keywords
    if (IsCSharpKeyword(sb.ToString()))
        sb.Append('_');

    return sb.ToString();
}

bool IsCSharpKeyword(string word)
{
    string[] keywords = new[] {
        "abstract","as","base","bool","break","byte","case","catch","char","checked",
        "class","const","continue","decimal","default","delegate","do","double","else","enum",
        "event","explicit","extern","false","finally","fixed","float","for","foreach","goto",
        "if","implicit","in","int","interface","internal","is","lock","long","namespace",
        "new","null","object","operator","out","override","params","private","protected",
        "public","readonly","ref","return","sbyte","sealed","short","sizeof","stackalloc",
        "static","string","struct","switch","this","throw","true","try","typeof","uint",
        "ulong","unchecked","unsafe","ushort","using","virtual","void","volatile","while"
    };
    return keywords.Contains(word);
}

string EscapeStringLiteral(string str) =>
    str.Replace("\\", "\\\\").Replace("\"", "\\\"");
#>
namespace Project;

<# 
GenerateEnumWithAttributes("AnimationFiles", ANIMATIONS, "*.anim;*.fbx");
GenerateEnumWithAttributes("AudioFiles", AUDIOS, "*.mp3;*.wav;*.ogg");
GenerateEnumWithAttributes("ComputeShaderFiles", COMPUTESHADERS, "*.hlsl");
GenerateEnumWithAttributes("DocumentFiles", DOCUMENTS, "*.txt;*.pdf;*.docx");
GenerateEnumWithAttributes("FontFiles", FONTS, "*.ttf;*.otf");
GenerateEnumWithAttributes("MaterialFiles", MATERIALS, "*.mat");
GenerateEnumWithAttributes("ModelFiles", MODELS, "*.fbx;*.obj;*.dae");
GenerateEnumWithAttributes("PackageFiles", PACKAGES, "*.pkg");
GenerateEnumWithAttributes("PrefabFiles", PREFABS, "*.prefab");
GenerateEnumWithAttributes("SceneFiles", SCENES, "*.scene");
GenerateEnumWithAttributes("ScriptFiles", SCRIPTS, "*.cs;*.js");
GenerateEnumWithAttributes("ShaderFiles", SHADERS, "*.hlsl");
GenerateEnumWithAttributes("TextureFiles", TEXTURES, "*.png;*.jpg;*.jpeg;*.bmp;*.tga");
GenerateEnumWithAttributes("VideoFiles", VIDEOS, "*.mp4;*.avi;*.mov");
#>
// Custom attribute to store asset paths
[AttributeUsage(AttributeTargets.Field)]
public class AssetPathAttribute : Attribute
{
    public string Path { get; }

    public AssetPathAttribute(string path) =>
        Path = path;
}

// Extension method to get the path from any enum value
public static class AssetExtensions
{
    public static string GetFullPath(this Enum value) =>
        Path.Combine(Engine.Utilities.AssetPaths.ASSETS, GetPath(value));

    public static string GetPath(this Enum value)
    {
        var memberInfo = value.GetType().GetMember(value.ToString());
        if (memberInfo is not null && memberInfo.Length > 0)
        {
            var attributes = memberInfo[0].GetCustomAttributes(typeof(AssetPathAttribute), false);
            if (attributes is not null && attributes.Length > 0)
                return ((AssetPathAttribute)attributes[0]).Path;
        }

        throw new ArgumentException("Enum value does not have an AssetPath attribute.");
    }
}